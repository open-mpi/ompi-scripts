diff --color -urp m4-1.4.16.orig/lib/fflush.c m4-1.4.16/lib/fflush.c
--- m4-1.4.16.orig/lib/fflush.c	2011-03-01 16:39:27.000000000 +0000
+++ m4-1.4.16/lib/fflush.c	2021-09-11 19:37:54.112227455 +0000
@@ -31,7 +31,7 @@
 #undef fflush
 
 
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
 
 /* Clear the stream's ungetc buffer, preserving the value of ftello (fp).  */
 static inline void
@@ -138,7 +138,7 @@ rpl_fflush (FILE *stream)
   if (stream == NULL || ! freading (stream))
     return fflush (stream);
 
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
 
   clear_ungetc_buffer_preserving_position (stream);
 
diff --color -urp m4-1.4.16.orig/lib/fpurge.c m4-1.4.16/lib/fpurge.c
--- m4-1.4.16.orig/lib/fpurge.c	2011-03-01 16:39:27.000000000 +0000
+++ m4-1.4.16/lib/fpurge.c	2021-09-11 19:37:54.112227455 +0000
@@ -61,7 +61,7 @@ fpurge (FILE *fp)
   /* Most systems provide FILE as a struct and the necessary bitmask in
      <stdio.h>, because they need it for implementing getc() and putc() as
      fast macros.  */
-# if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+# if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
   fp->_IO_read_end = fp->_IO_read_ptr;
   fp->_IO_write_ptr = fp->_IO_write_base;
   /* Avoid memory leak when there is an active ungetc buffer.  */
diff --color -urp m4-1.4.16.orig/lib/freadahead.c m4-1.4.16/lib/freadahead.c
--- m4-1.4.16.orig/lib/freadahead.c	2011-03-01 16:39:27.000000000 +0000
+++ m4-1.4.16/lib/freadahead.c	2021-09-11 19:37:54.112227455 +0000
@@ -25,7 +25,7 @@
 size_t
 freadahead (FILE *fp)
 {
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
   if (fp->_IO_write_ptr > fp->_IO_write_base)
     return 0;
   return (fp->_IO_read_end - fp->_IO_read_ptr)
diff --color -urp m4-1.4.16.orig/lib/freading.c m4-1.4.16/lib/freading.c
--- m4-1.4.16.orig/lib/freading.c	2011-03-01 16:39:27.000000000 +0000
+++ m4-1.4.16/lib/freading.c	2021-09-11 19:37:54.112227455 +0000
@@ -31,7 +31,7 @@ freading (FILE *fp)
   /* Most systems provide FILE as a struct and the necessary bitmask in
      <stdio.h>, because they need it for implementing getc() and putc() as
      fast macros.  */
-# if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+# if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
   return ((fp->_flags & _IO_NO_WRITES) != 0
           || ((fp->_flags & (_IO_NO_READS | _IO_CURRENTLY_PUTTING)) == 0
               && fp->_IO_read_base != NULL));
diff --color -urp m4-1.4.16.orig/lib/fseeko.c m4-1.4.16/lib/fseeko.c
--- m4-1.4.16.orig/lib/fseeko.c	2011-03-01 16:39:28.000000000 +0000
+++ m4-1.4.16/lib/fseeko.c	2021-09-11 19:37:54.112227455 +0000
@@ -40,7 +40,7 @@ fseeko (FILE *fp, off_t offset, int when
 #endif
 
   /* These tests are based on fpurge.c.  */
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
   if (fp->_IO_read_end == fp->_IO_read_ptr
       && fp->_IO_write_ptr == fp->_IO_write_base
       && fp->_IO_save_base == NULL)
@@ -106,7 +106,7 @@ fseeko (FILE *fp, off_t offset, int when
           return -1;
         }
 
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
       fp->_flags &= ~_IO_EOF_SEEN;
 #elif defined __sferror || defined __DragonFly__ /* FreeBSD, NetBSD, OpenBSD, DragonFly, MacOS X, Cygwin */
 # if defined __CYGWIN__
diff --color -urp m4-1.4.16.orig/lib/stdio-impl.h m4-1.4.16/lib/stdio-impl.h
--- m4-1.4.16.orig/lib/stdio-impl.h	2011-03-01 16:39:29.000000000 +0000
+++ m4-1.4.16/lib/stdio-impl.h	2021-09-11 19:37:54.112227455 +0000
@@ -18,6 +18,12 @@
    the same implementation of stdio extension API, except that some fields
    have different naming conventions, or their access requires some casts.  */
 
+/* Glibc 2.28 made _IO_IN_BACKUP private.  For now, work around this
+   problem by defining it ourselves.  FIXME: Do not rely on glibc
+   internals.  */
+#if !defined _IO_IN_BACKUP && defined _IO_EOF_SEEN
+# define _IO_IN_BACKUP 0x100
+#endif
 
 /* BSD stdio derived implementations.  */
 
Only in m4-1.4.16/lib: stdio.h.~1~
diff --color -urp m4-1.4.16.orig/lib/stdio.in.h m4-1.4.16/lib/stdio.in.h
--- m4-1.4.16.orig/lib/stdio.in.h	2011-03-01 16:39:29.000000000 +0000
+++ m4-1.4.16/lib/stdio.in.h	2021-09-11 19:55:34.246406982 +0000
@@ -158,11 +158,13 @@ _GL_WARN_ON_USE (fflush, "fflush is not
                  "use gnulib module fflush for portable POSIX compliance");
 #endif
 
+#if 0
 /* It is very rare that the developer ever has full control of stdin,
    so any use of gets warrants an unconditional warning.  Assume it is
    always declared, since it is required by C89.  */
 #undef gets
 _GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");
+#endif
 
 #if @GNULIB_FOPEN@
 # if @REPLACE_FOPEN@
Only in m4-1.4.16/lib: stdio.in.h.~1~
